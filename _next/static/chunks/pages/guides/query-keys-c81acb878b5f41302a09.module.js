(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[12],{"2OYR":function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/query-keys",function(){return a("O7hS")}])},O7hS:function(e,t,a){"use strict";a.r(t),a.d(t,"meta",(function(){return c})),a.d(t,"default",(function(){return y}));var n=a("wx14"),r=a("Ff2n"),s=a("q1tI"),o=a.n(s),i=a("7ljp"),u=a("er9C"),c=(o.a.createElement,{id:"query-keys",title:"Query Keys"}),l={meta:c},b=e=>{var{children:t}=e,a=Object(r.a)(e,["children"]);return Object(i.b)(u.a,Object(n.a)({meta:c},a),t)};function y(e){var{components:t}=e,a=Object(r.a)(e,["components"]);return Object(i.b)(b,Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"At its core, HTTPProbe manages query caching for you based on query keys. Query keys can be as simple as a string, or as complex as an array of many strings and nested objects. As long as the query key is serializable, and ",Object(i.b)("strong",{parentName:"p"},"unique to the query's data"),", you can use it!"),Object(i.b)("h3",{id:"string-only-query-keys"},"String-Only Query Keys",Object(i.b)("a",Object(n.a)({parentName:"h3"},{href:"#string-only-query-keys",title:"Direct link to heading",className:"anchor"}),Object(i.b)("span",Object(n.a)({parentName:"a"},{className:"icon icon-link"})))),Object(i.b)("p",null,"The simplest form of a key is actually not an array, but an individual string. When a string query key is passed, it is converted to an array internally with the string as the only item in the query key. This format is useful for:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Generic List/Index resources"),Object(i.b)("li",{parentName:"ul"},"Non-hierarchical resources")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"// A list of todos\nuseQuery('todos', ...) // queryKey === ['todos']\n\n// Something else, whatever!\nuseQuery('somethingSpecial', ...) // queryKey === ['somethingSpecial']\n")),Object(i.b)("h3",{id:"array-keys"},"Array Keys",Object(i.b)("a",Object(n.a)({parentName:"h3"},{href:"#array-keys",title:"Direct link to heading",className:"anchor"}),Object(i.b)("span",Object(n.a)({parentName:"a"},{className:"icon icon-link"})))),Object(i.b)("p",null,"When a query needs more information to uniquely describe its data, you can use an array with a string and any number of serializable objects to describe it. This is useful for:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Hierarchical or nested resources",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"It's common to pass an ID, index, or other primitive to uniquely identify the item"))),Object(i.b)("li",{parentName:"ul"},"Queries with additional parameters",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"It's common to pass an object of additional options")))),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"// An individual todo\nuseQuery(['todo', 5], ...)\n// queryKey === ['todo', 5]\n\n// And individual todo in a \"preview\" format\nuseQuery(['todo', 5, { preview: true }], ...)\n// queryKey === ['todo', 5, { preview: true }]\n\n// A list of todos that are \"done\"\nuseQuery(['todos', { type: 'done' }], ...)\n// queryKey === ['todos', { type: 'done' }]\n")),Object(i.b)("h3",{id:"query-keys-are-hashed-deterministically"},"Query Keys are hashed deterministically!",Object(i.b)("a",Object(n.a)({parentName:"h3"},{href:"#query-keys-are-hashed-deterministically",title:"Direct link to heading",className:"anchor"}),Object(i.b)("span",Object(n.a)({parentName:"a"},{className:"icon icon-link"})))),Object(i.b)("p",null,"This means that no matter the order of keys in objects, all of the following queries are considered equal:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"useQuery(['todos', { status, page }], ...)\nuseQuery(['todos', { page, status }], ...)\nuseQuery(['todos', { page, status, other: undefined }], ...)\n")),Object(i.b)("p",null,"The following query keys, however, are not equal. Array item order matters!"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"useQuery(['todos', status, page], ...)\nuseQuery(['todos', page, status], ...)\nuseQuery(['todos', undefined, page, status], ...)\n")),Object(i.b)("h2",{id:"if-your-query-function-depends-on-a-variable-include-it-in-your-query-key"},"If your query function depends on a variable, include it in your query key",Object(i.b)("a",Object(n.a)({parentName:"h2"},{href:"#if-your-query-function-depends-on-a-variable-include-it-in-your-query-key",title:"Direct link to heading",className:"anchor"}),Object(i.b)("span",Object(n.a)({parentName:"a"},{className:"icon icon-link"})))),Object(i.b)("p",null,"Since query keys uniquely describe the data they are fetching, they should include any variables you use in your query function that ",Object(i.b)("strong",{parentName:"p"},"change"),". For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'function Todos({ todoId }) {\n  const result = useQuery(["todos", todoId], () => fetchTodoById(todoId));\n}\n')))}y.isMDXComponent=!0}},[["2OYR",0,2,4,1,3,5]]]);