(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[11],{BvtP:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n("wx14"),r=n("Ff2n"),i=n("q1tI"),o=n.n(i),s=n("7ljp"),l=n("er9C"),c=(o.a.createElement,{id:"queries",title:"Queries"}),u={meta:c},b=e=>{var{children:t}=e,n=Object(r.a)(e,["children"]);return Object(s.b)(l.a,Object(a.a)({meta:c},n),t)};function d(e){var{components:t}=e,n=Object(r.a)(e,["components"]);return Object(s.b)(b,Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h2",{id:"query-basics"},"Query Basics",Object(s.b)("a",Object(a.a)({parentName:"h2"},{href:"#query-basics",title:"Direct link to heading",className:"anchor"}),Object(s.b)("span",Object(a.a)({parentName:"a"},{className:"icon icon-link"})))),Object(s.b)("p",null,"A query is a declarative dependency on an asynchronous source of data that is tied to a ",Object(s.b)("strong",{parentName:"p"},"unique key"),". A query can be used with any Promise based method (including GET and POST methods) to fetch data from a server. If your method modifies data on the server, we recommend using ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://react-query.tanstack.com/docs/guides/mutations"}),"Mutations")," instead."),Object(s.b)("p",null,"To subscribe to a query in your components or custom hooks, call the ",Object(s.b)("inlineCode",{parentName:"p"},"useQuery")," hook with at least:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"A ",Object(s.b)("strong",{parentName:"li"},"unique key for the query")),Object(s.b)("li",{parentName:"ul"},"A function that returns a promise that:",Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},"Resolves the data, or"),Object(s.b)("li",{parentName:"ul"},"Throws an error")))),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { useQuery } from 'react-query'\n\nfunction App() {\n  const info = useQuery('todos', fetchTodoList)\n}\n")),Object(s.b)("p",null,"The ",Object(s.b)("strong",{parentName:"p"},"unique key")," you provide is used internally for refetching, caching, and sharing your queries throughout your application."),Object(s.b)("p",null,"The query results returned by ",Object(s.b)("inlineCode",{parentName:"p"},"useQuery")," contains all of the information about the query that you'll need for templating and any other usage of the data:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const result = useQuery('todos', fetchTodoList)\n")),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"result")," object contains a few very important states you'll need to be aware of to be productive. A query can only be in one of the following states at any given moment:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"isLoading")," or ",Object(s.b)("inlineCode",{parentName:"li"},"status === 'loading'")," - The query has no data and is currently fetching"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"isError")," or ",Object(s.b)("inlineCode",{parentName:"li"},"status === 'error'")," - The query encountered an error"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"isSuccess")," or ",Object(s.b)("inlineCode",{parentName:"li"},"status === 'success'")," - The query was successful and data is available"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"isIdle")," or ",Object(s.b)("inlineCode",{parentName:"li"},"status === 'idle'")," - The query is currently disabled (you'll learn more about this in a bit)")),Object(s.b)("p",null,"Beyond those primary states, more information is available depending on the state of the query:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"error")," - If the query is in an ",Object(s.b)("inlineCode",{parentName:"li"},"isError")," state, the error is available via the ",Object(s.b)("inlineCode",{parentName:"li"},"error")," property."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"data")," - If the query is in a ",Object(s.b)("inlineCode",{parentName:"li"},"success")," state, the data is available via the ",Object(s.b)("inlineCode",{parentName:"li"},"data")," property."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"isFetching")," - In any state, if the query is fetching at any time (including background refetching) ",Object(s.b)("inlineCode",{parentName:"li"},"isFetching")," will be ",Object(s.b)("inlineCode",{parentName:"li"},"true"),".")),Object(s.b)("p",null,"For ",Object(s.b)("strong",{parentName:"p"},"most")," queries, it's usually sufficient to check for the ",Object(s.b)("inlineCode",{parentName:"p"},"isLoading")," state, then the ",Object(s.b)("inlineCode",{parentName:"p"},"isError")," state, then finally, assume that the data is available and render the successful state:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function Todos() {\n  const { isLoading, isError, data, error } = useQuery('todos', fetchTodoList)\n\n  if (isLoading) {\n    return <span>Loading...</span>\n  }\n\n  if (isError) {\n    return <span>Error: {error.message}</span>\n  }\n\n  // We can assume by this point that `isSuccess === true`\n  return (\n    <ul>\n      {data.map(todo => (\n        <li key={todo.id}>{todo.title}</li>\n      ))}\n    </ul>\n  )\n}\n")),Object(s.b)("p",null,"If booleans aren't your thing, you can always use the ",Object(s.b)("inlineCode",{parentName:"p"},"status")," state as well:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function Todos() {\n  const { status, data, error } = useQuery('todos', fetchTodoList)\n\n  if (status === 'loading') {\n    return <span>Loading...</span>\n  }\n\n  if (status === 'error') {\n    return <span>Error: {error.message}</span>\n  }\n\n  // also status === 'success', but \"else\" logic works, too\n  return (\n    <ul>\n      {data.map(todo => (\n        <li key={todo.id}>{todo.title}</li>\n      ))}\n    </ul>\n  )\n}\n")))}d.isMDXComponent=!0},gYI5:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/queries",function(){return n("BvtP")}])}},[["gYI5",0,2,4,1,3,5]]]);